AWSTemplateFormatVersion: 2010-09-09

Description: Cria uma lambda

Parameters:

  FunctionName:
    Type: String
    Default: HelloWorldNode

  S3Bucket:
    Type: String
    Default: 804473135082-lambda-src

  S3Key:
    Type: String
    Default: HelloWorldNode.zip
  
  SubnetId1:
    Type: String
    Default: subnet-0e23bd1e3eaee50b7

  SubnetId2:
    Type: String
    Default: subnet-06ac511687946d0ca

  SecurityGroupId:
    Type: String
    Default: sg-0ebb22f443a4566e1
  
  KmsKeyArn:
    Type: String
  
  Owner:
    Type: String
    Default: tg

Resources:

  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${FunctionName}ExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: !Sub ${FunctionName}ExecutionRolePolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - logs:*
              - ec2:DescribeNetworkInterfaces
              - ec2:CreateNetworkInterface
              - ec2:DeleteNetworkInterface
              - ec2:DescribeInstances
              - ec2:AttachNetworkInterface
            Resource: "*"

  Lambda:
    Type: AWS::Lambda::Function
    DependsOn: ExecutionRole
    Properties:
      FunctionName: !Ref FunctionName
      Runtime: nodejs14.x
      Role: !GetAtt ExecutionRole.Arn
      Handler: index.handler
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Ref S3Key
      # KmsKeyArn: !Ref KmsKeyArn
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds:
          - !Ref SubnetId1
          - !Ref SubnetId2
      Tags:
        - Key: Owner
          Value: !Ref Owner